{
  "hash": "91e7ec78513b3147b11274e4cbd57ca9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"03_D_data_preparation_models\"\nsubtitle: \"Data preparation - Model\"\nformat: html\neval: FALSE\n---\n\n\n# General overview\n\nHere we provided data preparation for linear models\n\n# Reading libraries and data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)       # data manipulation\nlibrary(tidyr)       # data tidying\nlibrary(here)        # file path management\nlibrary(readr)       # reading and writing CSV files\nlibrary(countrycode) # country and region codes\n```\n:::\n\n\n# Load data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Data from 01_C_data_preparation\nflow_country <- readr::read_csv(here::here(\"data\", \"processed\", \"flow_country.csv\")) \n\nspp_native_distribution <- readr::read_csv(here::here(\"data\", \"processed\", \"spp_native_distribution.csv\")) \n\ndf_country_native <- readr::read_csv(file = here::here(\"data\",\"processed\", \"df_country_native.csv\"))\n\nspp_type_distribution <- readr::read_csv(here::here(\"data\", \"processed\", \"spp_type_distribution.csv\")) \n\ndf_country_type <- readr::read_csv(file = here::here(\"data\",\"processed\", \"df_country_type.csv\"))\n\ndf_bio_dem <- readr::read_csv(file = here::here(\"data\", \"bio-dem_data.csv\"))\n\ninfra_museum <- readr::read_csv(here::here(\"data\",\"processed\", \"infra_museum.csv\"))\n\n# Data from 02_D_beta-countries.qmd\ndf_all_beta <- readr::read_csv(here::here(\"data\", \"processed\", \"df_all_beta.csv\"))\n```\n:::\n\n\nGet a list of countries and regions\n \n\n::: {.cell}\n\n```{.r .cell-code}\ncountries_list <- \n  countrycode::codelist |>\n  dplyr::select(region, iso3c) |>\n  tidyr::drop_na(region, iso3c)\n```\n:::\n\n\nJoining primary type and native data with Bio-Dem, Infra-museum, and Beta data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# joining type and native data frames\ndf_country_all <-\n  df_country_native |>\n  dplyr::full_join(df_country_type, \n            by = c(\"country_distribution\" = \"country_museum\")) |> \n  dplyr::mutate(\n    region_distribution = ifelse(\n      is.na(region_distribution), \n      region_museum, \n      region_distribution),\n    # REU doesn't have region on dataset\n    region_distribution = ifelse(\n      country_distribution == \"REU\", \n      \"Sub-Saharan Africa\", \n      region_distribution\n      )\n    ) |>\n  dplyr::select(\n    region = region_distribution,\n    country = country_distribution,\n    native_richness = native.richness,\n    type_richness\n  ) |>\n  tidyr::drop_na(country)|>\n  # change NAs to zero\n  dplyr::mutate(\n    dplyr::across(c(native_richness,\n                    type_richness),\n                  ~ifelse(is.na(.),0,.)))\n  \n\n# joining type and native data frame with biodem information\ndf_country_complete <-\n  df_country_all |>\n  dplyr::left_join(df_bio_dem, by = \"country\")\n\n# joining with museum infrastructure information\ndf_country_complete2 <-\n  df_country_complete |>\n  dplyr::left_join(infra_museum, by = c(\"country\" = \"country_museum\"))\n\n# joining with beta metric\ndf_country_complete3 <-\n  df_country_complete2 |>\n  dplyr::left_join(df_all_beta, by = c(\"country\" = \"countries\"))\n```\n:::\n\n\n## Modelling number of primary types per country\n\nHere we will model the number (counting) of total NBT in each country. Some countries house no NBT, and they are represented with NA. However the absence of primary types are an important information, meaning that these countries, for some reason, have zero primary types. So, first we transformed the NA values in `type_richness` variable to 0. Then we standardized all the predictors to 0 mean and 1 variation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_country_complete4 <-\n  df_country_complete3 |>\n  dplyr::ungroup() |>\n  dplyr::mutate(\n    type.richness.pad = ifelse(is.na(type_richness), 0, type_richness),\n    n.museums = ifelse(is.na(n.museums), 0, n.museums)) |>\n  dplyr::select(-type_richness) |>\n  tidyr::drop_na() |>  # removing NAs\n  dplyr::mutate(\n    years.independence = ifelse(yearsSinceIndependence == \"undefined\", 0, yearsSinceIndependence),\n    native.richness.pad = scale(native_richness, center = T, scale = TRUE)[, 1],\n    records.per.area.pad = scale(records_per_area, center = T, scale = T)[, 1],\n    years.independence.pad = scale(as.numeric(years.independence), center = T, scale = T)[, 1],\n    years.independence.fac = ifelse(as.numeric(years.independence) >= 1, 1, 0),\n    gdp.pad = scale(e_migdppc, center = T, scale = T)[, 1],\n    n.museums.pad = scale(n.museums, center = T, scale = T)[, 1],\n    colonization = relevel(as.factor(years.independence.fac), ref = \"0\")\n  )\n```\n:::\n\n\nTransforming turnover metrics to fit in the model. Here we transform beta metrics to fit it between zero and one, following [Ferrari and Cribari-Neto](https://www.ime.usp.br/~sferrari/beta.pdf)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# just transforming type and native turnover variable to fit it between zero and one\n\n# First creating a function to transform the data and avoid 0 and 1\n\nstd_beta <- function(x, s){\n  x_std <- (x*((length(x) - 1)) + s)/(length(x))\n  return(x_std)\n}\n\ndf_country_complete5 <-\n  df_country_complete4 |>\n  dplyr::mutate(type.beta.model = std_beta(x = type.beta, s = 0.5),\n                native.beta.model = std_beta(x = native.beta, s = 0.5))\n```\n:::\n\n\nData frame used to model Domestic Contribution (DC) and Domestic Retention (DR)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_country_prop <- \n  flow_country |> \n  dplyr::group_by(country_museum) |>\n  dplyr::add_count(name = \"total_country_museum\",\n                  wt = n) |>\n  dplyr::ungroup() |>\n  #add total_world\n  dplyr::add_count(name = \"total_type_world\",\n                   wt = n) |>\n  #filter only the flow to the same country\n  dplyr::filter(country_type == country_museum) |>\n  #rename to domestic_type_retained\n  dplyr::rename(domestic_type_retained = n) |>\n  #add prop_DC, prop_DR, and prop_CW\n  # DC - Domestic Contribution\n  # DR - Domestic Retention\n  # WC - World Contribution\n  dplyr::mutate(\n    prop_DC = domestic_type_retained/total_country_museum,\n    prop_DR = domestic_type_retained/total_country_type,\n    prop_WC = total_country_museum/total_type_world,\n    prop_DC = ifelse(is.na(prop_DC), 0, prop_DC)) |> \n  dplyr::select(-country_museum) |> \n  dplyr::rename(country = country_type) |> \n  dplyr::filter(total_country_type != 0)\n```\n:::\n\n\nJoin the df_country_prop with df_country_biodem5\n\nAdditionally, create a metric of success and failure for each proportion\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_country_complete6 <- \n  df_country_prop |> \n  dplyr::inner_join(df_country_complete5, by = c(\"country\")) |> \n  dplyr::mutate(\n    prop_DC.pad = std_beta(x = prop_DC, s = 0.5), \n    prop_DR.pad = std_beta(x = prop_DR, s = 0.5),\n    success.DC = domestic_type_retained, \n    failures.DC = total_country_museum - domestic_type_retained, \n    success.DR = domestic_type_retained, \n    failures.DR = total_country_type - domestic_type_retained\n    )\n```\n:::\n\n\n# Saving data sets to be used in the models\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreadr::write_csv(df_country_complete6, here::here(\"data\", \"processed\", \"df_country_complete6.csv\"))\nreadr::write_csv(df_country_prop, here::here(\"data\", \"processed\", \"df_country_prop.csv\"))\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}