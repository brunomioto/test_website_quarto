{
  "hash": "5767db4868e8598b9c45ec261715f3b0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"05_V_chord_diagram_Fig1\"\nsubtitle: \"Fig 1 - Chord diagram\"\nformat: html\neval: FALSE\n---\n\n\nHere we produce the chord diagram (Figure 1 in the manuscript)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(circlize)  #chord diagrams\nlibrary(dplyr)     #data manipulation\nlibrary(glue)      #string interpolation\n```\n:::\n\n\nData used in this script\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Data from 01_C_data_preparation.qmd\nflow_period_region <- readr::read_csv(here::here(\"data\", \"processed\", \"flow_period_region.csv\"))\n\nflow_region <- readr::read_csv(here::here(\"data\", \"processed\", \"flow_region.csv\")) \n```\n:::\n\n\nMapping NBTs flow among regions per time interval of 50 years\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# use region abbreviation\nflow_period_region2 <- flow_period_region |> \n  dplyr::mutate(\n    dplyr::across(\n      c(region_type, region_museum),\n      ~dplyr::case_when(\n        . == \"Europe & Central Asia\" ~ \"ECA\",\n        . == \"East Asia & Pacific\" ~ \"EAP\",\n        . == \"North America\" ~ \"NA\",\n        . == \"South Asia\" ~ \"SAR\",\n        . == \"Latin America & Caribbean\" ~ \"LAC\",\n        . == \"Sub-Saharan Africa\" ~ \"SSA\",\n        . == \"Middle East & North Africa\" ~ \"MENA\"\n      )))\n\nflow_region2 <- flow_region |> \n  dplyr::mutate(\n    dplyr::across(\n      c(region_type, region_museum),\n      ~dplyr::case_when(\n        . == \"Europe & Central Asia\" ~ \"ECA\",\n        . == \"East Asia & Pacific\" ~ \"EAP\",\n        . == \"North America\" ~ \"NA\",\n        . == \"South Asia\" ~ \"SAR\",\n        . == \"Latin America & Caribbean\" ~ \"LAC\",\n        . == \"Sub-Saharan Africa\" ~ \"SSA\",\n        . == \"Middle East & North Africa\" ~ \"MENA\"\n      )))\n\n# create dataset for each region\n\nregions_1750 <- flow_period_region2 |> \n  dplyr::filter(period == 1750) |> \n  dplyr::select(-c(period, total_period_region_type)) |> \n  dplyr::mutate(\n    region_type = glue::glue(\" {region_type}\"),\n    region_museum = glue::glue(\"{region_museum} \")) |> \n  dplyr::rename(\n    from = region_type,\n    to = region_museum,\n    value = n) |> \n  dplyr::filter(\n    value != 0\n  )\n\nregions_1800 <- flow_period_region2 |> \n  dplyr::filter(period == 1800) |> \n  dplyr::select(-c(period, total_period_region_type)) |> \n  dplyr::mutate(\n    region_type = glue::glue(\" {region_type}\"),\n    region_museum = glue::glue(\"{region_museum} \")) |> \n  dplyr::rename(\n    from = region_type,\n    to = region_museum,\n    value = n) |> \n  dplyr::filter(\n    value != 0\n  )\n\nregions_1850 <- flow_period_region2 |> \n  dplyr::filter(period == 1850) |> \n  dplyr::select(-c(period, total_period_region_type)) |> \n  dplyr::mutate(\n    region_type = glue::glue(\" {region_type}\"),\n    region_museum = glue::glue(\"{region_museum} \")) |> \n  dplyr::rename(\n    from = region_type,\n    to = region_museum,\n    value = n) |> \n  dplyr::filter(\n    value != 0\n  )\n\nregions_1900 <- flow_period_region2 |> \n  dplyr::filter(period == 1900) |> \n  dplyr::select(-c(period, total_period_region_type)) |> \n  dplyr::mutate(\n    region_type = glue::glue(\" {region_type}\"),\n    region_museum = glue::glue(\"{region_museum} \")) |> \n  dplyr::rename(\n    from = region_type,\n    to = region_museum,\n    value = n) |> \n  dplyr::filter(\n    value != 0\n  )\n\nregions_1950 <- flow_period_region2 |> \n  dplyr::filter(period == 1950) |> \n  dplyr::select(-c(period, total_period_region_type)) |> \n  dplyr::mutate(\n    region_type = glue::glue(\" {region_type}\"),\n    region_museum = glue::glue(\"{region_museum} \")) |> \n  dplyr::rename(\n    from = region_type,\n    to = region_museum,\n    value = n) |> \n  dplyr::filter(\n    value != 0\n  )\n\nregions_2000 <- flow_period_region2 |> \n  dplyr::filter(period == 2000) |> \n  dplyr::select(-c(period, total_period_region_type)) |> \n  dplyr::mutate(\n    region_type = glue::glue(\" {region_type}\"),\n    region_museum = glue::glue(\"{region_museum} \")) |> \n  dplyr::rename(\n    from = region_type,\n    to = region_museum,\n    value = n) |> \n  dplyr::filter(value != 0)\n\nregions_alltime <- flow_region2 |> \n  dplyr::select(-total_region_type) |> \n  dplyr::mutate(\n    region_type = glue::glue(\" {region_type}\"),\n    region_museum = glue::glue(\"{region_museum} \")) |> \n  dplyr::rename(\n    from = region_type,\n    to = region_museum,\n    value = n) |> \n  dplyr::filter(value != 0)\n\n#define colors\ncolors <- c(\" EAP\" = \"#4DBBD5FF\", \n            \" ECA\" = \"#E64B35FF\",\n            \" LAC\" = \"#00A087FF\", \n            \" MENA\" = \"#8491B4FF\",\n            \" NA\" = \"#3C5488FF\", \n            \" SAR\" = \"#B09C85FF\",\n            \" SSA\" = \"#F39B7FFF\",\n            \"EAP \" = \"#4DBBD5FF\", \n            \"ECA \" = \"#E64B35FF\",\n            \"LAC \" = \"#00A087FF\", \n            \"MENA \" = \"#8491B4FF\",\n            \"NA \" = \"#3C5488FF\", \n            \"SAR \" = \"#B09C85FF\",\n            \"SSA \" = \"#F39B7FFF\"\n)\n```\n:::\n\n\nProducing the figures\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#start pdf\npdf(here::here(\"output\", \"Figures\", \"Fig1.pdf\"), width = 8, height = 8)\n\n#define layout\n# The layout will follow this order\n# 1 4 7\n# 2 5 8\n# 3 6 9\nlayout(matrix(1:9, 3, 3))\n\n#1 - blank space for map\nplot(0, type='n', axes=FALSE, ann=FALSE)\n\n#2 - 1750-1799\nchordDiagram(regions_1750, \n             grid.col = colors,\n             directional = 1, \n             direction.type = c(\"arrows\"),\n             link.arr.type = \"big.arrow\",\n             reduce = 0.000000000000001,\n)\ntitle(\"1750-1799\")\n\n#3 - 1900-1949\nchordDiagram(regions_1900, \n             grid.col = colors,\n             directional = 1,\n             direction.type = c(\"arrows\"),\n             link.arr.type = \"big.arrow\",\n             reduce = 0.000000000000001,\n)\ntitle(\"1900-1949\")\n\n#4 - blank space for map\nplot(0, type='n', axes=FALSE, ann=FALSE)\n\n#5 - 1800-1849\nchordDiagram(regions_1800, \n             grid.col = colors,\n             directional = 1, \n             direction.type = c(\"arrows\"),\n             link.arr.type = \"big.arrow\",\n             reduce = 0.000000000000001,\n)\ntitle(\"1800-1849\")\n\n#6 - 1950-1999\nchordDiagram(regions_1950, \n             grid.col = colors,\n             directional = 1, \n             direction.type = c(\"arrows\"),\n             link.arr.type = \"big.arrow\",\n             reduce = 0.000000000000001,\n)\ntitle(\"1950-1999\")\n\n#7 - All time\nchordDiagram(regions_alltime, \n             grid.col = colors,\n             directional = 1,\n             direction.type = c(\"arrows\"),\n             link.arr.type = \"big.arrow\",\n             annotationTrack = \"grid\",\n             reduce = 0.000000000000001,\n             preAllocateTracks = list(track.height = 0.1,\n                                      track.margin = c(0,0)),\n             annotationTrackHeight = mm_h(c(2, 2)),\n             )\n\ncircos.track(track.index = 1, panel.fun = function(x, y) {\n  if(abs(CELL_META$cell.start.degree - CELL_META$cell.end.degree) > 0) {\n    sn = CELL_META$sector.index\n    i_state = as.numeric(gsub(\"(C|R)_\", \"\", sn))\n    circos.text(CELL_META$xcenter, 1, CELL_META$sector.index, \n                facing = \"inside\", niceFacing = TRUE, adj = c(0.5,0))\n    xlim = CELL_META$xlim\n    breaks = seq(0, 10000, by = 1000)\n    circos.axis(\n      major.at = breaks,\n      labels = ifelse(breaks >= 1000, paste0(breaks/1000, \"k\"), breaks),\n      labels.cex = 0.5,\n      h = \"bottom\"\n      )\n  }\n}, bg.border = NA)\n\ntitle(\"All time\")\n\n#8 - 1850-1899\nchordDiagram(regions_1850, \n             grid.col = colors,\n             directional = 1, \n             direction.type = c(\"arrows\"),\n             link.arr.type = \"big.arrow\",\n             reduce = 0.000000000000001,\n)\ntitle(\"1850-1899\")\n\n#9 - 2000-present\nchordDiagram(regions_2000, \n             grid.col = colors,\n             directional = 1, \n             direction.type = c(\"arrows\"),\n             link.arr.type = \"big.arrow\",\n             reduce = 0.000000000000001,\n)\ntitle(\"2000-present\")\n\n#Finish \ndev.off()\ncircos.clear()\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}