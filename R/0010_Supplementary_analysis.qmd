---
title: "Supplementary material"
format: html
eval: FALSE
---

In this document we provide the code to reproduce the Figures and Tables presented in supplementary material of the manuscript **"The macroecology of knowledge: Spatio-temporal patterns of name-bearing types in biodiversity science"**

```{r}
library(readr) # read csv objects
library(dplyr) # manipulate tables
library(ggplot2) # plot figures
library(scales) # change axis values
library(countrycode) # download country information
library(glmmTMB) # read models
```

# Native species richness

We calculate the native species richness for each country from data in the Catalog of Fishes. We used this source to avoid taxonomic mismatches between species names.

```{r}
# Data from 01_C_data_preparation.qmd
df_country_native <- readr::read_csv(file = here::here("data","processed", "df_country_native.csv"))
```

```{r}
countries <- 
  rnaturalearth::ne_countries(scale = "medium",
                                         returnclass = "sf") |>
  dplyr::filter(region_wb != "Antarctica")|>
  rmapshaper::ms_filter_islands(min_area = 20000000000) |>
  rmapshaper::ms_simplify(keep = 0.95)

sf_countries <-
  sf::st_as_sf(countries) |>
  dplyr::filter(admin != "Antarctica") |> 
  dplyr::select(iso_a3)

df_country_native_sf <-
  sf_countries |>
  dplyr::full_join(df_country_native, 
                   by = c(iso_a3 = "country_distribution"))
```

## Figure S1 - Native richness

Native richness was extracted from the Catalog of Fishes

```{r}
df_country_native_sf |>
  ggplot()+
  geom_sf(aes(fill = native.richness))+
  scale_fill_distiller(palette = "YlGnBu",
                       direction = 1,
                       na.value = "grey90",
                       breaks = c(1, 1000, 2000,3000, 3854))+
  labs(
    fill = "Native richness"
  )+
  guides(fill = guide_colorbar(barwidth = 20))+
  theme_void()+
  theme(
    legend.position = "top",
    legend.title.position = "top",
    legend.title = element_text(hjust = 0.5),
    plot.background = element_rect(fill = "white",
                                   color = NA)
  )+
  coord_sf(
    crs = "+proj=moll +x_50=0 +y_0=0 +lat_0=0 +lon_0=0"
    )

ggsave(here::here("output", "Figures",
                  "Supp-material", "FigS1_native_richness.png"),
       width = 7, height = 5, dpi = 600)
```

# All time Domestic Contribution (DC) and Domestic Retention (DR)

Here we provided all time values of DR and DC for each region. We used the same data from Figure 2 of the main text, but pulling together all the data 

```{r}
# Data from 01_C_data_preparation.qmd
flow_region_prop <- readr::read_csv(file = here::here("data","processed", "flow_region_prop.csv"))
```

## Figure S2 - Scatterplot of all-time

```{r}
flow_region_prop |>
  ggplot(aes(x = prop_DC, y = prop_DR, fill = region_type))+
  geom_hline(yintercept = 0.5, linetype = "dashed")+
  geom_vline(xintercept = 0.5, linetype = "dashed")+
  geom_point(
    shape = 21,
    size = 2.5
  )+
  scale_fill_manual(
    values = c(
      "Europe & Central Asia" = "#E64B35FF",
      "East Asia & Pacific" = "#4DBBD5FF",
      "North America" = "#3C5488FF",
      "South Asia" = "#B09C85FF",
      "Latin America & Caribbean" = "#00A087FF",
      "Sub-Saharan Africa" = "#F39B7FFF",
      "Middle East & North Africa" = "#8491B4FF"
    )
  )+
  scale_x_continuous(
    labels = scales::label_percent(),
    expand = expansion(mult = c(0.05, 0))
  )+
  scale_y_continuous(
    labels = scales::label_percent(),
    expand = expansion(mult = c(0.05, 0))
  )+
  labs(
    x = "Domestic Constribution (DC)",
    y = "Domestic Retention (DR)"
  )+
  theme_classic()+
  theme(
    strip.background = element_rect(fill = NA, color = NA),
    strip.text = element_text(face = "bold"),
    legend.position = "none",
    plot.background = element_blank(),
    panel.spacing = unit(5, "pt"),
    panel.spacing.x = unit(15, "pt"),
    plot.margin = margin(5,15,5,5,"pt"),
    axis.line = element_line(lineend = "round"),
    axis.text = element_text(color = "black"),
    axis.ticks = element_line(color = "black")
  )+
  coord_cartesian(xlim = c(0,1),
                  ylim = c(0,1),
                  clip = "off")

# saving image
ggsave(filename = here::here("output", "Figures", "Supp-material", "FigS2_scatterplot.png"), 
       width = 3.5, height = 3)
```

# Model results

```{r}
library(sjPlot)    # creating summary tables of model results
library(glmmTMB)   # read model output objects
library(DHARMa)    # diagnostic graphics of models
library(here)      # constructing file paths
```

We provide here the detailed results from all models used in the main text of the manuscript. 

## Model data

```{r}
# Data from 03_C_data_preparation.qmd
df_country_complete6 <- readr::read_csv(here::here("data", "processed", "df_country_complete6.csv"))

# Data from 04_D_model_NBTs.qmd
mod_counting_NBT <- readRDS(here::here("output", 
                                       "models", 
                                       "model_res_counting.rds")) # NBT total countings
mod_DC <- readRDS(here::here("output", 
                             "models", 
                             "model_res_dc.rds"))
mod_DR <- readRDS(here::here("output", 
                             "models", 
                             "model_res_dr.rds"))
mod_turnover_native <- readRDS(here::here("output", 
                                          "models",
                                      "model_res_turnover_native.rds"))
mod_turnover_nbt <- readRDS(here::here("output", 
                                       "models",
                                       "model_res_turnover_nbt.rds"))

```

## Tables with estimated parameters

Producing tables with sjPlot

```{r}
sjPlot::tab_model(mod_counting_NBT, 
                  transform = NULL, 
                  pred.labels = c("Intercept", 
                                  "Native richness",
                                  "Gbif records per area",
                                  "Years since independence", 
                                  "GDP", 
                                  "Number of museums", 
                                  "Dispersion parameter"), 
                  dv.labels = "Total Name Bearing Types", 
                  string.pred = "Coefficients", 
                  string.est = "Estimates", 
                  string.p = "P-value")



# Table for betabinomial model with Domestic contribution

sjPlot::tab_model(mod_DC, 
                  transform = NULL, 
                  pred.labels = c("Intercept", 
                                  "Native richness",
                                  "Gbif records per area",
                                  "Years since independence", 
                                  "GDP", 
                                  "Number of museums"), 
                  dv.labels = "Domestic Contribution", 
                  string.pred = "Coefficients", 
                  string.est = "Estimates", 
                  string.p = "P-value")


# Table for betabinomial model with Domestic retention

sjPlot::tab_model(mod_DR, 
                  transform = NULL, 
                  pred.labels = c("Intercept", 
                                  "Native richness",
                                  "Gbif records per area",
                                  "Years since independence", 
                                  "GDP", 
                                  "Number of museums"), 
                  dv.labels = "Domestic Retention", 
                  string.pred = "Coefficients", 
                  string.est = "Estimates", 
                  string.p = "P-value")

# Table for beta model with native turnover 

sjPlot::tab_model(mod_turnover_native, 
                  transform = NULL, 
                  pred.labels = c("Intercept", 
                                  "Native richness",
                                  "Gbif records per area",
                                  "Years since independence", 
                                  "GDP", 
                                  "Number of museums"), 
                  dv.labels = "Native turnover", 
                  string.pred = "Coefficients", 
                  string.est = "Estimates", 
                  string.p = "P-value")

# Table for beta model with nbt turnover 

sjPlot::tab_model(mod_turnover_nbt, 
                  transform = NULL,
                  pred.labels = c("Intercept", 
                                  "Native richness",
                                  "Gbif records per area",
                                  "Years since independence", 
                                  "GDP", 
                                  "Number of museums"), 
                  dv.labels = "NBT turnover", 
                  string.pred = "Coefficients", 
                  string.est = "Estimates", 
                  string.p = "P-value")



```

## Diagnostic graphics

```{r}
# total number of NBT
DHARMa::simulateResiduals(fittedModel = mod_counting_NBT, plot = T)

# Domestic Contribution and Domestic Retention
DHARMa::simulateResiduals(fittedModel = mod_DC, plot = TRUE) # DC
DHARMa::simulateResiduals(fittedModel = mod_DR, plot = TRUE) # DR

# turnover metrics
DHARMa::simulateResiduals(fittedModel = mod_turnover_native, plot = TRUE)
DHARMa::simulateResiduals(fittedModel = mod_turnover_nbt, plot = TRUE)
```

